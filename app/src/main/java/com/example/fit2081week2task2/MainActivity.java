package com.example.fit2081week2task2;


import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.GestureDetector;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.view.GestureDetectorCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.ArrayList;
import java.util.StringTokenizer;

public class MainActivity extends AppCompatActivity implements View.OnTouchListener, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
    Button mButton;
    EditText mMovieName;
    EditText mMovieYear;
    EditText mMovieCountry;
    EditText mMovieGenre;
    EditText mMovieCost;
    EditText mMovieKeywords;
    Button mClearButton;
    private DrawerLayout drawerlayout;
    private NavigationView navigationView;
    FloatingActionButton fab;
    ListView newList;
    ArrayList<String> mMovieArray = new ArrayList<String>();
    ArrayAdapter<String> adapter;
    RecyclerView recyclerView;
    ArrayList<MovieDetails> datasource = new ArrayList<MovieDetails>();
    private MovieViewModel mMovieViewModel;
    //Week 8 Firebase
    FirebaseDatabase mFBDB;
    DatabaseReference ref;
    DatabaseReference ref2;
    DatabaseReference ref3;
    //Week 10 Stuff
    float x;
    float y;
    float x2;
    float y2;
    //Week 11
    private GestureDetectorCompat mDetector;
    private ScaleGestureDetector mScaleDetector;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.drawer_activity_main);
        //SharedPreferences sharedPref = MainActivity.this.getPreferences(Context.MODE_PRIVATE); // Opens a new shared preferences file (Week 3 Task 2)
        //SharedPreferences.Editor editor = sharedPref.edit(); //Opens an editor for the shared preferences file (Week 3 Task 2)
        mButton = findViewById(R.id.button); /*This line identifies the button for use by looking for the id given to it, in this case the ID is button*/
        mMovieName = findViewById(R.id.MovieNameEditText);/*This line identifies the text for use by looking for the id given to it, in this case the ID is MovieNameEditText (Generated by the program when I first created it)*/
        mMovieYear = findViewById(R.id.YearEditText);
        mMovieCountry = findViewById(R.id.CountryReleasedEditText);
        mMovieGenre = findViewById(R.id.GenreTextEdit);
        mMovieCost = findViewById(R.id.MovieCostEdit);
        mMovieKeywords = findViewById(R.id.KeywordsTextEdit);
        mClearButton = findViewById(R.id.ClearButton);
        fab = findViewById(R.id.fab);
        newList = findViewById(R.id.MovieList);
        SharedPreferences sharedPref = MainActivity.this.getPreferences(Context.MODE_PRIVATE); // Opens a new shared preferences file (Week 3 Task 2)
        SharedPreferences.Editor editor = sharedPref.edit();
        ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.SEND_SMS, Manifest.permission.RECEIVE_SMS, Manifest.permission.READ_SMS}, 0); //Requests Perms for reading sms messages. (Week 4 Task 3)
        MyBroadcastReceiver myBroadCastReceiver = new MyBroadcastReceiver(); //Creates new broadcast receiver (Week 4 Task 3)
        registerReceiver(myBroadCastReceiver, new IntentFilter(SMSReceiver.SMS_FILTER)); //Registers the broadcast receiver with the intent filter declared in the SMSReceiver Class. (Week 4 Task 3)

        //Week 5 tasks
        drawerlayout = findViewById(R.id.drawer_layout);
        navigationView = findViewById(R.id.nav_view);
        Toolbar toolbar = findViewById(R.id.toolbar);

        setSupportActionBar(toolbar);

        adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mMovieArray );
        newList.setAdapter(adapter);

        //Week6
        recyclerView=findViewById(R.id.recycler_layout_id);

        //Week8
        mMovieViewModel = new ViewModelProvider(this).get(MovieViewModel.class);
        mFBDB = FirebaseDatabase.getInstance();
        ref = mFBDB.getReference("/movies");
        ref2 = mFBDB.getReference("/bigBudget");
        ref3 = mFBDB.getReference();

        //Week 10
        //Listening for gestures to do certain operations
        View view = findViewById(R.id.frame_layout_id);
        view.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent event) {
                int action = event.getActionMasked();
                final int MINIMUM_DISTANCE = 50;
                switch (action){
                    case (MotionEvent.ACTION_DOWN):
                        x = event.getX();
                        y = event.getY();
                        Log.d("Week10","Action was down");
                        return true;
                    case MotionEvent.ACTION_MOVE:
                        x2 = event.getX();
                        y2 = event.getY();
                    return true;
                    case (MotionEvent.ACTION_UP):
                        x2 = event.getX();
                        y2 = event.getY();
                        float xDif = x2 - x;
                        float yDif = y2 - y;
                        //float inverseYDif = y - y2;
                        if(xDif >= MINIMUM_DISTANCE && yDif <= MINIMUM_DISTANCE){
                            addListItem();
                            MovieDetails newMovie = new MovieDetails(mMovieName.getText().toString(), mMovieYear.getText().toString(), mMovieCountry.getText().toString(), Integer.valueOf(mMovieCost.getText().toString()), mMovieGenre.getText().toString(), mMovieKeywords.getText().toString());
                            mMovieViewModel.insert(newMovie);
                            ref.push().setValue(newMovie);
                            adapter.notifyDataSetChanged();
                            Toast.makeText(MainActivity.this, mMovieName.getText().toString(), Toast.LENGTH_SHORT).show();
                            Log.d("Week10","Action was swipe left to right");

                        }
                        else if(yDif >= MINIMUM_DISTANCE && xDif <= MINIMUM_DISTANCE){
                           /* while(0 < mMovieArray.size()){
                                mMovieArray.remove(mMovieArray.size()-1);
                                adapter.notifyDataSetChanged();
                            }
                            //Deletes all of the entries in the Database.
                            mMovieViewModel.deleteAll();
                            ref.setValue(null);
                            Log.d("Week10","Action was swipe up to down");*/
                            mMovieName.setText("");
                            mMovieYear.setText("");
                            mMovieCountry.setText("");
                            mMovieGenre.setText("");
                            mMovieCost.setText("");
                            mMovieKeywords.setText("");
                            Toast.makeText(MainActivity.this, "Clearing Values!", Toast.LENGTH_SHORT).show();

                        }
                        else if(xDif > yDif) {
                            if (yDif <= MINIMUM_DISTANCE && xDif <= MINIMUM_DISTANCE) {
                                mMovieName.setText("Default Value");
                                mMovieYear.setText("Default Value");
                                mMovieCountry.setText("Default Value");
                                mMovieGenre.setText("Default Value");
                                mMovieCost.setText("Default Value");
                                mMovieKeywords.setText("Default Value");
                                Log.d("Week10", "Action was swipe down to up");
                                Toast.makeText(MainActivity.this, "Resetting to Default Values", Toast.LENGTH_SHORT).show();
                            }
                        }
                        else if (yDif > xDif) {
                            if (xDif <= MINIMUM_DISTANCE && yDif <= MINIMUM_DISTANCE) {
                                mMovieViewModel.deleteHighestCost();
                                Toast.makeText(MainActivity.this, "Deleting Most Expensive Movie", Toast.LENGTH_SHORT).show();
                            }
                        }
                        else{
                            Log.d("Week10","No swipe detected");
                        }
                        return true;
                    case (MotionEvent.ACTION_CANCEL):
                    default:
                        return false;
                }
            }
        });

        //FAB Logic
        fab.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view){
                Snackbar.make(view,"Adding Movie!", Snackbar.LENGTH_SHORT).setAction("Undo",undoOnClickListener).show();
                editor.putString("Movie Name", mMovieName.getText().toString());
                editor.putString("Year Released", mMovieYear.getText().toString());
                editor.putString("Movie Genre", mMovieGenre.getText().toString().toLowerCase());
                editor.putString("Movie Country", mMovieCountry.getText().toString());
                editor.putString("Movie Cost", mMovieCost.getText().toString());
                editor.putString("Movie Keywords", mMovieKeywords.getText().toString());
                editor.apply();
                addListItem();
                MovieDetails newMovie = new MovieDetails(mMovieName.getText().toString(), mMovieYear.getText().toString(), mMovieCountry.getText().toString(), Integer.valueOf(mMovieCost.getText().toString()), mMovieGenre.getText().toString(), mMovieKeywords.getText().toString());
                mMovieViewModel.insert(newMovie);
                if(Integer.valueOf(mMovieCost.getText().toString()) > 40){
                    ref2.push().setValue(newMovie);
                }
                ref.push().setValue(newMovie);
                adapter.notifyDataSetChanged();

            }
        });

        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawerlayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawerlayout.addDrawerListener(toggle);
        toggle.syncState();
        navigationView.setNavigationItemSelectedListener(new MyNavigationListener());

        //Checking Shared Preferences for Data
        if (sharedPref != null) { //This if loop checks to see if there are values in the sharedPref file, and if so, to restore those values. (Week 3 Task 2)
            mMovieName.setText(sharedPref.getString("Movie Name", mMovieName.getText().toString()).toUpperCase());
            mMovieYear.setText(sharedPref.getString("Year Released", mMovieYear.getText().toString()));
            mMovieCountry.setText(sharedPref.getString("Movie Country", mMovieCountry.getText().toString()));
            mMovieGenre.setText(sharedPref.getString("Movie Genre", mMovieGenre.getText().toString()));
            mMovieCost.setText(sharedPref.getString("Movie Cost", mMovieCost.getText().toString()));
            mMovieKeywords.setText(sharedPref.getString("Movie Keywords", mMovieKeywords.getText().toString()));
        }
        mButton.setOnClickListener( /*This tells the program to look for the button being pressed*/
                new View.OnClickListener() { /*This tells the program to let the user view whatever is defined in this function*/
                    public void onClick(View view) {/*This tells the program to do something once the user has clicked on the button*/
                        Toast.makeText(MainActivity.this, mMovieName.getText().toString(), Toast.LENGTH_SHORT).show();/*This generates a toast event. What is displayed by the event is the movie name as defined by mMovieName.getText().toString()*/
                        //These lines make it so that when the button is clicked, the values of the movie most recently inputted are saved to be restored once the app closes. (Task 2)
                        editor.putString("Movie Name", mMovieName.getText().toString());
                        editor.putString("Year Released", mMovieYear.getText().toString());
                        editor.putString("Movie Genre", mMovieGenre.getText().toString().toLowerCase());
                        editor.putString("Movie Country", mMovieCountry.getText().toString());
                        editor.putString("Movie Cost", mMovieCost.getText().toString());
                        editor.putString("Movie Keywords", mMovieKeywords.getText().toString());
                        editor.apply();
                        addListItem();
                        MovieDetails newMovie = new MovieDetails(mMovieName.getText().toString(), mMovieYear.getText().toString(), mMovieCountry.getText().toString(), Integer.valueOf(mMovieCost.getText().toString()), mMovieGenre.getText().toString(), mMovieKeywords.getText().toString());
                        mMovieViewModel.insert(newMovie);
                        if(Integer.valueOf(mMovieCost.getText().toString()) > 40){
                            ref2.push().setValue(newMovie);
                        }
                        ref.push().setValue(newMovie);
                        adapter.notifyDataSetChanged();
                    }
                }
        );
        //Clear Button Logic
        mClearButton.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View view) { //This just sets all the fields with an empty string to clear them. (Week 3 Task 3)
                        mMovieName.setText("");
                        mMovieYear.setText("");
                        mMovieCountry.setText("");
                        mMovieGenre.setText("");
                        mMovieCost.setText("");
                        mMovieKeywords.setText("");
                    }
                }
        );

        //Week 11 Listeners and Detectors
        mScaleDetector = new ScaleGestureDetector(this, (ScaleGestureDetector.OnScaleGestureListener) this);
        mDetector = new GestureDetectorCompat(this, this);
        mDetector.setOnDoubleTapListener(this);
        View newGestureLayout = findViewById(R.id.frame_layout_id);
        newGestureLayout.setOnTouchListener(this);
    }
    //Logic for adding things to the listview
    private void addListItem() {
        mMovieArray.add(mMovieName.getText().toString() + " | " + mMovieYear.getText().toString());
        MovieDetails newDetails = new MovieDetails(mMovieName.getText().toString(),mMovieYear.getText().toString(),mMovieCountry.getText().toString(),Integer.valueOf(mMovieCost.getText().toString()),mMovieGenre.getText().toString(),mMovieKeywords.getText().toString());
        //datasource.add(newDetails);
        adapter.notifyDataSetChanged();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu){
        getMenuInflater().inflate(R.menu.options_menu,menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item){
        int id = item.getItemId();

        if (id == R.id.clear_fields_menu_id) {
            mMovieName.setText("");
            mMovieYear.setText("");
            mMovieCountry.setText("");
            mMovieGenre.setText("");
            mMovieCost.setText("");
            mMovieKeywords.setText("");
        }

        return true;
    }


    //(Week 3 Task 1)
    @Override
    public void onSaveInstanceState(Bundle savedInstanceState) { //This saves each of the fields for when the phone is reoriented.
        savedInstanceState.putString("Movie Name", mMovieName.getText().toString());
        savedInstanceState.putString("Year Released", mMovieYear.getText().toString());
        savedInstanceState.putString("Movie Genre", mMovieGenre.getText().toString().toLowerCase());
        savedInstanceState.putString("Movie Cost", mMovieCost.getText().toString());
        savedInstanceState.putString("Movie Keywords", mMovieKeywords.getText().toString());
        super.onSaveInstanceState(savedInstanceState);
    }

    @Override
    public void onRestoreInstanceState(Bundle savedInstanceState) { //This restores each of the fields once the phone is reoriented.
        super.onRestoreInstanceState(savedInstanceState);

        mMovieName.setText(savedInstanceState.getString("Movie Name").toUpperCase());
        mMovieYear.setText(savedInstanceState.getString("Year Released"));
        mMovieGenre.setText(savedInstanceState.getString("Movie Genre"));
        mMovieCost.setText(savedInstanceState.getString("Movie Cost"));
        mMovieKeywords.setText(savedInstanceState.getString("Movie Keywords"));

    }

    //Week 11 Stuff
    @Override
    public boolean onSingleTapConfirmed(MotionEvent motionEvent) {
        mMovieCost.setText(Integer.valueOf(mMovieCost.getText().toString()) + 150);
        Toast.makeText(MainActivity.this, "Adding 150 to the Cost!", Toast.LENGTH_SHORT).show();
        return true;
    }

    @Override
    public boolean onDoubleTap(MotionEvent motionEvent) {
        mMovieName.setText("Hot Fuzz");
        mMovieYear.setText("2007");
        mMovieCountry.setText("UK");
        mMovieGenre.setText("Action/Comedy");
        mMovieCost.setText("12");
        mMovieKeywords.setText("Action, Comedy, Series, Cornetto Trilogy");
        Toast.makeText(MainActivity.this, "Loading values for Hot Fuzz!", Toast.LENGTH_SHORT).show();
        return true;
    }

    @Override
    public boolean onDoubleTapEvent(MotionEvent motionEvent) {
        return false;
    }

    @Override
    public boolean onDown(MotionEvent motionEvent) {
        return false;
    }

    @Override
    public void onShowPress(MotionEvent motionEvent) {

    }

    @Override
    public boolean onSingleTapUp(MotionEvent motionEvent) {
        return false;
    }

    @Override
    public boolean onScroll(MotionEvent motionEvent, MotionEvent motionEvent1, float v, float v1) {
        return false;
    }

    @Override
    public void onLongPress(MotionEvent motionEvent) {

    }

    @Override
    public boolean onFling(MotionEvent motionEvent, MotionEvent motionEvent1, float v, float v1) {
        return false;
    }

    @Override
    public boolean onTouch(View view, MotionEvent motionEvent) {
        return false;
    }

    //End Week 11 Stuff
    //Week 4 Task 3
    private class MyBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {

            //Gets the message from the intent
            String msg = intent.getStringExtra(SMSReceiver.SMS_MSG_KEY);

            //Reads the message to tokenise the values

            StringTokenizer sT = new StringTokenizer(msg, ";");
            String movieName = sT.nextToken();
            String movieYear = sT.nextToken();
            String movieCountry = sT.nextToken();
            String movieGenre = sT.nextToken();
            String movieCost = sT.nextToken();
            String movieKeyword = sT.nextToken();

            //These update the UI to populate the values.
            mMovieName.setText(movieName);
            mMovieYear.setText(movieYear);
            mMovieCountry.setText(movieCountry);
            mMovieGenre.setText(movieGenre);
            mMovieCost.setText(movieCost);
            mMovieKeywords.setText(movieKeyword);
        }
    }

    private class MyNavigationListener implements NavigationView.OnNavigationItemSelectedListener {
        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            // get the id of the selected item
            SharedPreferences sharedPref = MainActivity.this.getPreferences(Context.MODE_PRIVATE); // Opens a new shared preferences file (Week 3 Task 2)
            SharedPreferences.Editor editor = sharedPref.edit();
            int id = item.getItemId();
            if(id == R.id.RemoveLastMovie){
                //Calls the DeleteLast method as defined in MovieDetailDao.
                mMovieViewModel.deleteLast();
                mMovieArray.remove(mMovieArray.size()-1);
                //datasource.remove(datasource.size()-1);
               adapter.notifyDataSetChanged();
            }
            else if(id == R.id.AddMovieMenuID){
                /*editor.putString("Movie Name", mMovieName.getText().toString());
                editor.putString("Year Released", mMovieYear.getText().toString());
                editor.putString("Movie Genre", mMovieGenre.getText().toString().toLowerCase());
                editor.putString("Movie Country", mMovieCountry.getText().toString());
                editor.putString("Movie Cost", mMovieCost.getText().toString());
                editor.putString("Movie Keywords", mMovieKeywords.getText().toString());
                editor.apply();*/
                addListItem();
                //Creates a new MovieDetails object to insert into the database.
                MovieDetails newMovie = new MovieDetails(mMovieName.getText().toString(), mMovieYear.getText().toString(), mMovieCountry.getText().toString(), Integer.valueOf(mMovieCost.getText().toString()), mMovieGenre.getText().toString(), mMovieKeywords.getText().toString());
                mMovieViewModel.insert(newMovie);
                if(Integer.valueOf(mMovieCost.getText().toString()) > 40){
                    ref2.push().setValue(newMovie);
                }
                ref.push().setValue(newMovie);
            }
            else if(id == R.id.ViewAllMovies){
                viewAllMovies(recyclerView);


                //getSupportFragmentManager().beginTransaction().add(R.id.frame_layout_id,Fragment1.newInstance()).addToBackStack("F1").commit();
            }
            else if(id == R.id.DeleteMoviesOlderThan2000){
                mMovieViewModel.deleteYoungerThan2000();
            }
            else if(id == R.id.DeleteMoviesLessThan100){
                mMovieViewModel.deleteLessThan100();
            }
            else if(id == R.id.ListMoreThan100){
               listMoreThan100(recyclerView);
            }
            else {
               while(0 < mMovieArray.size()){
                    mMovieArray.remove(mMovieArray.size()-1);
                    //datasource.remove(datasource.size()-1);
                    adapter.notifyDataSetChanged();
                }
               //Deletes all of the entries in the Database.
                mMovieViewModel.deleteAll();
               ref3.setValue(null);
            }
            // close the drawer
            drawerlayout.closeDrawers();
            // tell the OS
            return true;
        }
    }
    //This method starts a new activity with RecyclerActivity.
    public void viewAllMovies(View view){
        Intent intent = new Intent(this, RecyclerActivity.class);
        //Bundle args = new Bundle();
        //args.putSerializable("ARRAYLIST",(Serializable)datasource);
        //intent.putExtra("BUNDLE",args);
        startActivity(intent);
    }
    //This method starts a new activity to view all items in the database that cost more than 100
    public void listMoreThan100(View view){
        Intent intent = new Intent(this, NewRecycler.class);
        startActivity(intent);
    }
    //This method holds the logic to remove the last item added to the database/list
    View.OnClickListener undoOnClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            mMovieArray.remove(mMovieArray.size()-1);
            adapter.notifyDataSetChanged();
        }
    };

}